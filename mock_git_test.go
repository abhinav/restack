// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abhinav/restack (interfaces: Git)

package restack

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGit is a mock of Git interface
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockGit) EXPECT() *MockGitMockRecorder {
	return _m.recorder
}

// ListHeads mocks base method
func (_m *MockGit) ListHeads(_param0 context.Context) (map[string][]string, error) {
	ret := _m.ctrl.Call(_m, "ListHeads", _param0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHeads indicates an expected call of ListHeads
func (_mr *MockGitMockRecorder) ListHeads(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListHeads", reflect.TypeOf((*MockGit)(nil).ListHeads), arg0)
}

// RebaseHeadName mocks base method
func (_m *MockGit) RebaseHeadName(_param0 context.Context) (string, error) {
	ret := _m.ctrl.Call(_m, "RebaseHeadName", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebaseHeadName indicates an expected call of RebaseHeadName
func (_mr *MockGitMockRecorder) RebaseHeadName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RebaseHeadName", reflect.TypeOf((*MockGit)(nil).RebaseHeadName), arg0)
}

// SetGlobalConfig mocks base method
func (_m *MockGit) SetGlobalConfig(_param0 context.Context, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "SetGlobalConfig", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGlobalConfig indicates an expected call of SetGlobalConfig
func (_mr *MockGitMockRecorder) SetGlobalConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetGlobalConfig", reflect.TypeOf((*MockGit)(nil).SetGlobalConfig), arg0, arg1, arg2)
}
