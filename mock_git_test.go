// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abhinav/restack (interfaces: Git)

// Package restack is a generated GoMock package.
package restack

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGit is a mock of Git interface
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// ListHeads mocks base method
func (m *MockGit) ListHeads(arg0 context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHeads", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHeads indicates an expected call of ListHeads
func (mr *MockGitMockRecorder) ListHeads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHeads", reflect.TypeOf((*MockGit)(nil).ListHeads), arg0)
}

// RebaseHeadName mocks base method
func (m *MockGit) RebaseHeadName(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebaseHeadName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebaseHeadName indicates an expected call of RebaseHeadName
func (mr *MockGitMockRecorder) RebaseHeadName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebaseHeadName", reflect.TypeOf((*MockGit)(nil).RebaseHeadName), arg0)
}
