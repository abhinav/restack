name: Release

on:
  push:
    tags: ['v*']

  # Support running this manually without uploading to test out the workflow.
  workflow_dispatch:
    inputs:
      version:
        description: "Version we're pretending to release, e.g. 0.6.0"
        required: true
        type: string

jobs:

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Linux
          - slug: linux-amd64
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            extra_pkgs: musl-tools

          - slug: linux-arm64
            target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            linker: aarch64-linux-musl-gcc
            musl-cross: aarch64-linux-musl-cross
            strip: aarch64-linux-musl-strip
            no-build-std: true

          - slug: linux-armv7
            target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            linker: armv7l-linux-musleabihf-gcc
            musl-cross: armv7l-linux-musleabihf-cross
            strip: armv7l-linux-musleabihf-strip
            no-build-std: true

          # macOS
          - slug: darwin-amd64
            target: x86_64-apple-darwin
            os: macos-latest
          - slug: darwin-arm64
            target: aarch64-apple-darwin
            os: macos-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        target: ${{ matrix.target }}
        profile: minimal
        components: rust-src

    - uses: Swatinem/rust-cache@v2

    - name: Install extra packages
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.extra_pkgs != '' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.extra_pkgs }}

    - name: Install musl cross-compilation toolchain
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.musl-cross != '' }}
      run: |
        mkdir -p "$HOME/.local"
        curl -o /tmp/musl.tgz https://musl.cc/${{ matrix.musl-cross }}.tgz
        tar -xzf /tmp/musl.tgz -C "$HOME/.local"
        echo "$HOME/.local/${{ matrix.musl-cross }}/bin" >> "$GITHUB_PATH"

    - name: Configure linker
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.linker != '' }}
      run: |
        mkdir -p .cargo
        cat > .cargo/config <<EOF
        [target.${{ matrix.target }}]
        linker = "${{ matrix.linker }}"
        EOF

    - name: Build (build-std)
      uses: actions-rs/cargo@v1
      if: ${{ !matrix.no-build-std }}
      with:
        command: build
        args: >-
          --target ${{ matrix.target }}
          --locked
          --release
          -Z build-std=std,panic_abort
          -Z build-std-features=panic_immediate_abort

    - name: Build (no-build-std)
      uses: actions-rs/cargo@v1
      if: ${{ matrix.no-build-std }}
      with:
        command: build
        args: >-
          --target ${{ matrix.target }}
          --locked
          --release

    - name: Strip binary
      run: |
        strip=${{ matrix.strip || 'strip' }}
        exe=target/${{ matrix.target }}/release/restack
        echo "Before: $(wc -c < "$exe") bytes"
        "$strip" target/${{ matrix.target }}/release/restack
        echo "After: $(wc -c < "$exe") bytes"

    - name: Prepare archive
      run: |
        tar -cvzf restack-${{ matrix.slug }}.tar.gz \
             -C target/${{ matrix.target }}/release \
             restack

    - name: Upload archive
      uses: actions/upload-artifact@v3
      with:
        name: restack-archive
        path: restack-*.tar.gz

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:

    - name: Install parse-changelog
      uses: taiki-e/install-action@v2
      with:
        tool: parse-changelog@0.5.1

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkout Homebrew tap
      uses: actions/checkout@v4
      with:
        repository: abhinav/homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
        path: homebrew-tap

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal

    - name: Download archives
      uses: actions/download-artifact@v3
      with:
        name: restack-archive

    - name: Determine version number (push)
      if:  github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "VERSION=${REF#refs/tags/v}" >> "$GITHUB_ENV"
      env:
        REF: ${{ github.ref }}

    - name: Determine version number (workflow_dispatch)
      if:  github.event_name == 'workflow_dispatch'
      run: |
        echo "VERSION=${INPUT_VERSION#v}" >> "$GITHUB_ENV"
      env:
        INPUT_VERSION: ${{ inputs.version }}

    - name: Generate package specs
      run: |
        tools/release/genpkgspec.sh ${{ env.VERSION }} restack-*.tar.gz

        echo ::group::Homebrew Formula
        cat target/formula/restack.rb
        echo ::endgroup::

        echo ::group::restack-bin/PKGBUILD
        cat target/aur-bin/PKGBUILD
        echo ::endgroup::

    - name: Extract changelog
      run: |
        parse-changelog CHANGELOG.md ${{ env.VERSION }} > ${{ github.workspace }}-CHANGELOG.txt
        echo ::group::CHANGELOG
        cat ${{ github.workspace }}-CHANGELOG.txt
        echo ::endgroup::

    - name: Publish Release
      if:  github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: 'restack-*.tar.gz'
        body_path: ${{ github.workspace }}-CHANGELOG.txt
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Homebrew tap
      if:  github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      working-directory: homebrew-tap
      run: |
        git config --local user.name "$COMMIT_USERNAME"
        git config --local user.email "$COMMIT_EMAIL"

        cp ../target/formula/restack.rb .
        git add restack.rb
        git commit -m "restack ${{ env.VERSION }}"
        git push
      env:
        COMMIT_USERNAME: ${{ secrets.AUR_USERNAME }}
        COMMIT_EMAIL: ${{ secrets.AUR_EMAIL }}

    - name: Publish AUR package (binary)
      uses: KSXGitHub/github-actions-deploy-aur@v2.7.0
      if:  github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      with:
        pkgname: restack-bin
        pkgbuild: ./target/aur-bin/PKGBUILD
        commit_username: ${{ secrets.AUR_USERNAME }}
        commit_email: ${{ secrets.AUR_EMAIL }}
        ssh_private_key: ${{ secrets.AUR_KEY }}
        commit_message: restack ${{ env.VERSION }}
        allow_empty_commits: false

    - name: Release Cargo crate
      if:  github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        cargo login ${{ secrets.CARGO_TOKEN }}
        echo ::group::Publishing files
        cargo packge --list
        echo ::endgroup::
        cargo publish

    - name: Publish AUR package (source)
      if:  github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: KSXGitHub/github-actions-deploy-aur@v2.7.0
      with:
        pkgname: restack
        pkgbuild: ./target/aur/PKGBUILD
        commit_username: ${{ secrets.AUR_USERNAME }}
        commit_email: ${{ secrets.AUR_EMAIL }}
        ssh_private_key: ${{ secrets.AUR_KEY }}
        commit_message: restack ${{ env.VERSION }}
        allow_empty_commits: false
        updpkgsums: true

